import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';

class BookingHistory extends StatelessWidget {
  const BookingHistory({Key? key}) : super(key: key);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
  void _showBookingDetails(BuildContext context, Map<String, dynamic> booking, String phoneNumber, String docId) {
    List<Map<String, dynamic>> services = (booking['Services'] as List<dynamic>)
        .map((e) => Map<String, dynamic>.from(e))
        .toList();

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á"),
          content: SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text("üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á: ${booking['Date'] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}"),
                Text("‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${booking['Time'] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}"),
                const SizedBox(height: 10),
                const Text("üìù ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:", style: TextStyle(fontWeight: FontWeight.bold)),
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: List.generate(services.length, (index) {
                    var item = services[index];
                    String serviceName = item['service'] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
                    int quantity = item['quantity'] ?? 1;
                    int pricePerUnit = item['price'] ?? 0;
                    int totalPrice = quantity * pricePerUnit;
                    return Text("‚Ä¢ $serviceName ($quantity ‡∏ä‡∏¥‡πâ‡∏ô) - ‡∏ø$totalPrice");
                  }),
                ),
                const SizedBox(height: 10),
                Text("üìç ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á: ${booking['DeliveryAddress'] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}"),
                const SizedBox(height: 10),
                Text("üìå ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${booking['Status'] ?? '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£'}", style: const TextStyle(fontWeight: FontWeight.bold)),
                const SizedBox(height: 10),
                Text("üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: $phoneNumber"),
              ],
            ),
          ),
            actions: [
              TextButton(
                onPressed: () => Navigator.of(context).pop(),
                child: const Text("‡∏õ‡∏¥‡∏î", style: TextStyle(color: Colors.red)),
              ),
              // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö‡∏ñ‡πâ‡∏≤ Status ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"
              if (booking['Status'] != '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£' && booking['Status'] != '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£')
                TextButton(
                  onPressed: () => _deleteBooking(context, docId),
                  child: const Text("‡∏•‡∏ö", style: TextStyle(color: Colors.red)),
                ),
              // ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ñ‡πâ‡∏≤ Status ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
              if (booking['Status'] != '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å')
                TextButton(
                  onPressed: () => _cancelBooking(context, docId),
                  child: const Text("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", style: TextStyle(color: Colors.red)),
                ),
            ]
        );
      },
    );
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
  void _deleteBooking(BuildContext context, String docId) async {
    try {
      await FirebaseFirestore.instance.collection('Bookings').doc(docId).update({
        "Status": "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß",
      });

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"), backgroundColor: Colors.green),
      );

      Navigator.of(context).pop(); // ‡∏õ‡∏¥‡∏î Dialog
    } catch (error) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $error"), backgroundColor: Colors.red),
      );
    }
  }
  void _cancelBooking(BuildContext context, String docId) async {
    try {
      await FirebaseFirestore.instance.collection('Bookings').doc(docId).update({
        "Status": "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
      });

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"), backgroundColor: Colors.green),
      );

      Navigator.of(context).pop(); // ‡∏õ‡∏¥‡∏î Dialog
    } catch (error) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $error"), backgroundColor: Colors.red),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    final String userEmail = FirebaseAuth.instance.currentUser?.email ?? "";

    return Scaffold(
      appBar: AppBar(
        title: Text("‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á", style: TextStyle(color: Colors.pink[900],
            fontSize: 22.0,
            fontWeight: FontWeight.bold)),
        backgroundColor: Colors.white,
        centerTitle: true,
        automaticallyImplyLeading: false,
      ),
      backgroundColor: Colors.white,
      body: StreamBuilder(
        stream: FirebaseFirestore.instance
            .collection('Bookings')
            .where('Email', isEqualTo: userEmail)
            .where('Status', isNotEqualTo: '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß') // ‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
            .snapshots(),
        builder: (context, AsyncSnapshot<QuerySnapshot> snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          }

          if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
            return const Center(child: Text("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á"));
          }

          return ListView.builder(
            itemCount: snapshot.data!.docs.length,
            itemBuilder: (context, index) {
              final doc = snapshot.data!.docs[index];
              final booking = doc.data() as Map<String, dynamic>;

              String phoneNumber = booking['Number'] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';

              return GestureDetector(
                onTap: () {
                  _showBookingDetails(context, booking, phoneNumber, doc.id);
                },
                child: Card(
                  color: Colors.pink[50],
                  margin: const EdgeInsets.all(10),
                  child: ListTile(
                    title: Text("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á: ${booking['Date']}"),
                    subtitle: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text("‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: ‡∏ø${booking['TotalPrice']}"),
                        Text("‡πÄ‡∏ß‡∏•‡∏≤: ${booking['Time']}"),
                        Text("‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á: ${booking['DeliveryAddress']}"),
                        Text("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: $phoneNumber"),
                      ],
                    ),
                  ),
                ),
              );
            },
          );
        },
      ),
    );
  }
}
